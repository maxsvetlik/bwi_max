#include <ros/ros.h>
#include <tf/tf.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <tf/transform_listener.h>
#include <actionlib/server/simple_action_server.h>
#include <fetch_human/FetchHuman.h>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

class FetchHuman{

}

bool rotate(){
    MoveBaseClient ac("move_base", true);
    while(!ac.waitForServer(ros::Duration(5.0)))
      ROS_INFO("Waiting for the move_base action server to come up");

    bool turning = true;
    double turn = .25 * M_PI; //arbitrary value for yaw turning
    move_base_msgs::MoveBaseGoal goal;
    while(turning){
      goal.target_pose.header.stamp = ros::Time::now();
      goal.target_pose.header.frame_id = "/base_link";

      goal.target_pose.pose.position.x = 0.0;
      goal.target_pose.pose.position.y = 0.0;
      goal.target_pose.pose.orientation = tf::createQuaternionMsgFromYaw(turn);

      ROS_INFO("Sending goal");
      ac.sendGoal(goal);

      ac.waitForResult();
      ros::Duration(2.0).sleep();
      //Call service, check for humans
      //if(humansFound)
      //  turning = false;
    }
    return true;
}
bool seek(){
  MoveBaseClient ac("move_base", true);
  while(!ac.waitForServer(ros::Duration(5.0)))
    ROS_INFO("Waiting for the move_base action server to come up");

  //Grab current map coordinates
  double curX;
  double curY;
  ros::NodeHandle nh;
  tf::TransformListener listener;
  tf::StampedTransform transform;
  try
    {
        listener.lookupTransform("/map","/base_link",ros::Time(0), transform);
        ROS_INFO("Got a transform! x = %f, y = %f",transform.getOrigin().x(),transform.getOrigin().y());
        curX = transform.getOrigin().x();
        curY = transform.getOrigin().y();
    }
  catch (tf::TransformException ex)
    {
        ROS_ERROR("Error: %s", ex.what());
	return false;
    }

	//TODO here: Calculate the closest point from the Pose[] poses?
    move_base_msgs::MoveBaseGoal goal;
    goal.target_pose.header.stamp = ros::Time::now();
    goal.target_pose.header.frame_id = "map"; //might change to be odom
//nav_kinect_rgb_optical_frame = the kinect frame. go from k to map

    //goal.target_pose.pose.position.x = req.x;
    //goal.target_pose.pose.position.y = req.y;
    //goal.target_pose.pose.orientation = tf::createQuaternionMsgFromYaw(0);

    ROS_INFO("Sending goal");
    ac.sendGoal(goal);
    ac.waitForResult();

    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED){
      ROS_INFO("ROB has successfully moved forward");
      return true;
    }
    else
      ROS_INFO("ROB has failed to move forward");

    return false;
}
int main(int argc, char** argv){
  ros::init(argc, argv, "human_seeker");
  rotate();
  return 0;
}
